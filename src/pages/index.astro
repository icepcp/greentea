---
import {client} from "../lib/astro";
import imageUrlBuilder from '@sanity/image-url'
import { Image } from 'astro:assets';
import Layout from "../layout.astro";

const builder = imageUrlBuilder(client)

interface FetchDataResult {
	[key: string]: any;
}

const fetchData = async (type: string, fields: string) => {
	const query = `*[ _type == "${type}"]{ ${fields} } | order(title asc)`;

	// Fetch data and cast the result to the expected structure
	const result = await client.fetch(query);

	// Adjust the return type based on the actual result structure
	return result as FetchDataResult[];
};

const home = await fetchData("home", `"title" : title, "lefttext": lefttext, "righttext": righttext, "image": bgimg, "imagealt": bgimg.alt`);
const pages = await fetchData("pages", `"title" : title, "slug": slug.current, "image": img, "imagealt": img.alt, "show": showonhome`);

function urlFor(source: string) {
	return builder.image(source);
}

interface Page {
	show: boolean | null;
}

const visiblePages = pages.filter((page: Page) => page.show !== false && page.show !== null);
---
<Layout title={home[0]["title"]}>
	<div class="h-screen sm:min-h-[40rem] min-h-[55rem]">
		<Image class="object-cover w-full z-0 opacity-100 fade h-1/2" src={urlFor(home[0]["image"]).format("webp").url()} alt={home[0]["imagealt"]} width="1920" height="1000" />
		<div class="mx-auto max-w-7xl">
			<header class="absolute top-0 px-6 sm:px-10 h-1/2 sm:min-h-[20rem] min-h-[27.5rem] grid content-end z-10 w-full lg:pb-4 pb-6 max-w-7xl">
				<h1 class="text-3xl xs:text-4xl sm:text-5xl font-semibold">{home[0].title}</h1>
				<div class="justify-between lg:flex text-sm xs:text-lg mt-2 whitespace-pre-line tracking-[.005em]">
					<p>{home[0]["lefttext"]}</p>
					<p class="lg:text-right mt-2 lg:mt-0">{home[0]["righttext"]}</p>
				</div>
			</header>
			<main class="lg:mx-10 md:mx-56 sm:mx-32 xs:mx-6 mx-4 h-1/2 lg:flex gap-4 pb-5">
				{visiblePages.map(({ image, imagealt, slug, title }: { image: { _type: string; alt: string; asset: any }; imagealt: string; slug: string; title: string }) => (
					<a
						href={slug}
						class="bg-green-100 hover:bg-green-200 hover:-translate-y-1 hover:shadow-lg ring-1 ring-opacity-20 ring-black transition rounded-2xl p-3 flex flex-col mb-6 lg:mb-0 pb-2"
					>
						<Image
							src={urlFor(image.asset).format("webp").url()}
							alt={imagealt}
							className="rounded-xl mb-2 object-cover w-full flex-grow" // Note: Use className instead of class
						width={500}
						height={500}
						/>
						<h2 class="text-2xl sm:text-3xl font-semibold whitespace-pre-line ml-0.5 pb-2">{title}</h2>
					</a>
				))}
			</main>
		</div>
	</div>
</Layout>
<style>
	.fade {
		mask: linear-gradient(black, transparent);
	}

	body {
		background-color: rgb(237 233 254);
	}
</style>